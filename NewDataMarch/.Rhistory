data("mat_gene")
data("mat_gbm")
library(ComplexHeatmap)
data("mat_gbm")
library(ComplexHeatmap)
data("mat_variant")
data("mat_sample")
data("mat_gbm")
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto")
library(readr)
library(dplyr)
library(ggplot2)
library(venn)
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto")
GenesEiMybs <- read_csv("GenesEiMybs.csv")
DataSet <- GenesEiMybs[,2:9]; #View(DataSet)
DataSet <- as.data.frame(DataSet)
DDataSet <- ifelse(DataSet!=0,1,0);
# << == >>  << == >>  << == >>  << == >>  << == >>  << == >>  << == >>
x <- as.data.frame(matrix(sample(0:1, 329, replace = TRUE), ncol = 7))
colnames(x) <- c("Trophozoites","en_8h",
"en_24h", "en_48h", "en_72h",
"ex_2h","ex_8h")
Set1 <- DDataSet[,2];  Set2 <- DDataSet[,3];
Set3 <- DDataSet[,4];  Set4 <- DDataSet[,5];
Set5 <- DDataSet[,6];  Set6 <- DDataSet[,7];
Set7 <- DDataSet[,8];
x$Trophozoites <- Set1
x$en_8h <- Set2
x$en_24h<- Set3
x$en_48h<- Set4
x$en_72h<- Set5
x$ex_2h<- Set6
x$ex_8h<- Set7
# with dashed lines
venn(x, ggplot = TRUE, linetype = "dashed",
size = 0.5,
ellipse = TRUE,
zcolor = c("red", "blue", "yellow", "green", "gray", "orange", "purple"),
col = c("red", "blue", "yellow", "green", "gray", "orange", "purple"))
venn_plot <- venn(x, ggplot = TRUE, linetype = "dashed",
size = 0.5,
ellipse = TRUE,
zcolor = c("red", "blue", "yellow", "green", "gray", "orange", "purple"),
col = c("red", "blue", "yellow", "green", "gray", "orange", "purple"))
venn_plot <- venn_plot+ggtitle("EiMybs Genns's Venn Diagram")
print(venn_plot)
setwd("~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones")
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
archivos <- list.files(directorio)
palabra_buscada <- "Set1"
palabra_reemplazo <- "Trophozoite"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set2"
palabra_reemplazo <- "en_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warning()
warnings()
# Palabra a buscar y reemplazar
palabra_buscada <- "Set3"
palabra_reemplazo <- "en_24h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings()
# Palabra a buscar y reemplazar
palabra_buscada <- "Set4"
palabra_reemplazo <- "en_48h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set5"
palabra_reemplazo <- "en_72h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set6"
palabra_reemplazo <- "ex_2h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "Set7"
palabra_reemplazo <- "ex_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set7"
palabra_reemplazo <- "_ex_8h"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set2"
palabra_reemplazo <- "en_8h"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "_Set2_Set3"
palabra_reemplazo <- "_en_8h_en_24h"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
palabra_buscada <- "_Set2_Set3"
palabra_reemplazo <- "_en_8h_en_24h"
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "Intersection_Trophozoite_Set2_Set3"
palabra_reemplazo <- "Intersection_Trophozoite_en_8h_en_24h"
palabra_buscada <- "Intersection_Trophozoite_Set2_Set3"
palabra_reemplazo <- "Intersection_Trophozoite_en_8h_en_24h"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings()
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Obtener la lista de archivos en la carpeta
archivos <- list.files(directorio)
archivos
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set1_"
palabra_reemplazo <- "_Trophozoite_"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set2_"
palabra_reemplazo <- "_en_8h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
palabra_buscada <- "_Set3_"
palabra_reemplazo <- "_en_24h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
# Palabra a buscar y reemplazar
palabra_buscada <- "_Set4_"
palabra_reemplazo <- "_en_48h_"
directorio <- "~/Nextcloud/NubeGralCarlos/ElisaProject/NuevoProyecto/Definitivos/Intersecciones"
# Recorrer la lista de archivos
for (archivo in archivos) {
# Generar el nuevo nombre de archivo con la palabra reemplazada
nuevo_nombre <- gsub(palabra_buscada, palabra_reemplazo, archivo)
# Renombrar el archivo
file.rename(file.path(directorio, archivo), file.path(directorio, nuevo_nombre))
}
warnings
warnings()
source("~/Downloads/CursoProba/TareasAhtziri/MiRegresion.R")
shiny::runApp('Downloads/CursoProba/TareasAhtziri')
runApp('Downloads/CursoProba/TareasBrayan')
runApp('Downloads/CursoProba/TareasNestor/app_nestF.R')
source("~/Downloads/CursoProba/TareasMaria/MiRegresion.R")
install.packages(latex2exp)
source("~/Downloads/CursoProba/TareasMarisol/MiRegresion.R")
shiny::runApp('Downloads/CursoProba/TareasMarisol')
install.packages('BiocManager')
BiocManager::install('RockefellerUniversity/Bioconductor_Introduction',subdir='BioconductorIntroduction')
save.image("~/Sin título.RData")
install.packages("index")
install_github("dagdata","genomicsclass")
devtools::install_github("dagdata/genomicsclass")
library(devtools)
devtools::install_github("dagdata/genomicsclass")
devtools::install_github("https://github.com/dagdata/genomicsclass")
devtools::install_github("genomicsclass/GSE5859")
library(GenomicAlignments)
BiocManager::install('Rsamtools')
BiocManager::install('vsn')
BiocManager::install('org.Hs.eg.db')
BiocManager::install('sva')
library(parathyroidSE)
BiocManager::install(c("genefilter","geneplotter"))
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
library(readxl)
library(RColorBrewer)
library(readr)
library(pheatmap)
library(dplyr)
setwd("~/Desktop/MiGithub/MapaCalorReloaded/NewDataMarch")
setwd("~/Desktop/MiGithub/MapaCalorReloaded/NewDataMarch")
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
write_csv(EhMybSgenesexpression,"EhMybSGenesMicroarray.csv")
View(EhMybSgenesexpression)
my_colors = brewer.pal(n = 11, name = "RdBu")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
my_colors2 = c("green", "yellow", "pink")
my_colors2 = colorRampPalette(my_colors2)(50)
my_colors3 = brewer.pal(n = 11, name = "RdBu")
my_colors3 = colorRampPalette(my_colors3)(50)
my_colors3 = rev(my_colors3)
my_colors4 = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
NewGenes <- read_csv("EhMybSGenesmicroarray.csv"); View(NewGenes)
colnames(NewGenes)
colnames(NewGenes) <- c("GeneID","Nombre",
"TrophozoiteBasal","Normal",
"AttCulture","VirulentColon",
"VirulentCulture","CtrlStarvation",
"SerumStarved","SerumReplenished",
"HS_0hr","HS_2hr",
"HS_4hr","HS_8hr");
View(NewGenes)
View(NewGenes)
u <- dim(NewGenes)
rownames(NewGenes) <- NewGenes$GeneID
NewGenes_Clean <- NewGenes[,3:u[2]]; View(NewGenes_Clean)
NewGenes_Clean <- as.data.frame(NewGenes_Clean); View(NewGenes_Clean)
rownames(NewGenes_Clean) <- NewGenes$GeneID; View(NewGenes_Clean)
#---- Generacion de las bdd modificadas ----
NewGenes_log2   <-  log2(NewGenes_Clean + 1)
NewGenesOrdered <- NewGenes_Clean[order(-NewGenes_Clean$Normal),]; View(NewGenesOrdered)
top_genes_NewGenes_Trop <- NewGenesOrdered %>% filter(Normal>0) %>% select(Normal)
View(top_genes_NewGenes_Trop)
k  <- dim(NewGenes_Clean); proporcion <- 1;
NS <- round(k[1]*proporcion);
random_genes_NewGenes  <- sample(rownames(NewGenes_Clean),NS );
sampledNewGenes_Log2   <- NewGenes_log2[random_genes_NewGenes, ];
NewGenes_log2_filtrado <- NewGenes_log2[rowSums(NewGenes_log2) != 0, ];
View(NewGenes_log2_filtrado)
LetraSize <- 6
pdf("MapasCalor/BoxplotEhMybSMicroArray.pdf")
boxplot(NewGenes_log2_filtrado, las = 2)
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArray.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors2.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors2,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors3.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors3,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors4.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors4,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
# ---- Carga de librerias ----
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
library(readxl)
library(RColorBrewer)
library(readr)
library(pheatmap)
library(dplyr)
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
#---- Lectura de los datos ----
setwd("~/Desktop/MiGithub/MapaCalorReloaded/NewDataMarch")
#setwd("~/Documents/GitHub/MapaCalorReloaded/NewDataMarch")
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
write_csv(EhMybSgenesexpression,"EhMybSGenesMicroarray.csv")
View(EhMybSgenesexpression)
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
# ---- Personalización de la paleta de colores ----
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
my_colors = brewer.pal(n = 11, name = "RdBu")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
my_colors2 = c("green", "yellow", "pink")
my_colors2 = colorRampPalette(my_colors2)(50)
my_colors3 = brewer.pal(n = 11, name = "RdBu")
my_colors3 = colorRampPalette(my_colors3)(50)
my_colors3 = rev(my_colors3)
my_colors4 = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
# ---- Genes de MicroArray ----
#<< == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >> << == >>
NewGenes <- read_csv("EhMybSGenesmicroarray.csv"); View(NewGenes)
colnames(NewGenes)
colnames(NewGenes) <- c("GeneID","Nombre",
"TrophozoiteBasal","Normal",
"AttCulture","VirulentColon",
"VirulentCulture","CtrlStarvation",
"SerumStarved","SerumReplenished",
"HS_0hr","HS_2hr",
"HS_4hr","HS_8hr");
View(NewGenes)
u <- dim(NewGenes)
rownames(NewGenes) <- NewGenes$GeneID
NewGenes_Clean <- NewGenes[,3:u[2]]; View(NewGenes_Clean)
NewGenes_Clean <- as.data.frame(NewGenes_Clean); View(NewGenes_Clean)
rownames(NewGenes_Clean) <- NewGenes$GeneID; View(NewGenes_Clean)
#---- Generacion de las bdd modificadas ----
NewGenes_log2   <-  log2(NewGenes_Clean + 1)
NewGenesOrdered <- NewGenes_Clean[order(-NewGenes_Clean$Normal),]; View(NewGenesOrdered)
top_genes_NewGenes_Trop <- NewGenesOrdered %>% filter(Normal>0) %>% select(Normal)
View(top_genes_NewGenes_Trop)
k  <- dim(NewGenes_Clean); proporcion <- 1;
NS <- round(k[1]*proporcion);
random_genes_NewGenes  <- sample(rownames(NewGenes_Clean),NS );
sampledNewGenes_Log2   <- NewGenes_log2[random_genes_NewGenes, ];
NewGenes_log2_filtrado <- NewGenes_log2[rowSums(NewGenes_log2) != 0, ];
View(NewGenes_log2_filtrado)
LetraSize <- 6
pdf("MapasCalor/BoxplotEhMybSMicroArray.pdf")
boxplot(NewGenes_log2_filtrado, las = 2)
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArray.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors2.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors2,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors3.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors3,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSMicroArrayMycolors4.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors4,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - MicroArray")
dev.off()
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionRNASeq.xls")
EhMybSgenesexpressionRNASeq <- read_excel("EhMybSgenesexpressionRNASeq.xls")
View(EhMybSgenesexpressionSeq)
EhMybSgenesexpressionRNASeq <- read_excel("EhMybSgenesexpressionRNASeq.xls")
View(EhMybSgenesexpressionRNASeq)
write_csv(EhMybSgenesexpressionRNASeq,"EhMybSGenesRNASeq.csv")
NewGenes <- read_csv("EhMybSGenesRNASeq.csv"); View(NewGenes)
setwd("~/Desktop/MiGithub/MapaCalorReloaded/NewDataMarch")
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
write_csv(EhMybSgenesexpression,"EhMybSGenesMicroarray.csv")
View(EhMybSgenesexpression)
EhMybSgenesexpressionRNASeq <- read_excel("EhMybSgenesexpressionRNASeq.xls")
View(EhMybSgenesexpressionRNASeq)
write_csv(EhMybSgenesexpressionRNASeq,"EhMybSGenesRNASeq.csv")
NewGenes <- read_csv("EhMybSGenesRNASeq.csv"); View(NewGenes)
colnames(NewGenes)
colnames(NewGenes) <- c("GeneID","Nombre",
"TrophozoiteBasal","Normal",
"AttCulture","VirulentColon",
"VirulentCulture","CtrlStarvation",
"SerumStarved","SerumReplenished",
"HS_0hr","HS_2hr",
"HS_4hr","HS_8hr");
View(NewGenes)
u <- dim(NewGenes)
rownames(NewGenes) <- NewGenes$GeneID
NewGenes_Clean <- NewGenes[,3:u[2]]; View(NewGenes_Clean)
NewGenes_Clean <- as.data.frame(NewGenes_Clean); View(NewGenes_Clean)
rownames(NewGenes_Clean) <- NewGenes$GeneID; View(NewGenes_Clean)
#---- Generacion de las bdd modificadas ----
NewGenes_log2   <-  log2(NewGenes_Clean + 1)
NewGenesOrdered <- NewGenes_Clean[order(-NewGenes_Clean$Normal),]; View(NewGenesOrdered)
top_genes_NewGenes_Trop <- NewGenesOrdered %>% filter(Normal>0) %>% select(Normal)
View(top_genes_NewGenes_Trop)
k  <- dim(NewGenes_Clean); proporcion <- 1;
NS <- round(k[1]*proporcion);
random_genes_NewGenes  <- sample(rownames(NewGenes_Clean),NS );
sampledNewGenes_Log2   <- NewGenes_log2[random_genes_NewGenes, ];
NewGenes_log2_filtrado <- NewGenes_log2[rowSums(NewGenes_log2) != 0, ];
View(NewGenes_log2_filtrado)
LetraSize <- 6
EhMybSgenesexpressionRNASeq <- read_excel("EhMybSgenesexpressionRNASeq.xls")
View(EhMybSgenesexpressionRNASeq)
write_csv(EhMybSgenesexpressionRNASeq,"EhMybSGenesRNASeq.csv")
NewGenes <- read_csv("EhMybSGenesRNASeq.csv"); View(NewGenes)
colnames(NewGenes)
colnames(NewGenes) <- c("GeneID","Nombre",
"TrophozoiteBasal","Normal",
"AttCulture","VirulentColon",
"VirulentCulture","CtrlStarvation",
"SerumStarved","SerumReplenished",
"HS_0hr","HS_2hr",
"HS_4hr","HS_8hr");
View(NewGenes)
u <- dim(NewGenes)
rownames(NewGenes) <- NewGenes$GeneID
NewGenes_Clean <- NewGenes[,3:u[2]]; View(NewGenes_Clean)
NewGenes_Clean <- as.data.frame(NewGenes_Clean); View(NewGenes_Clean)
rownames(NewGenes_Clean) <- NewGenes$GeneID; View(NewGenes_Clean)
#---- Generacion de las bdd modificadas ----
NewGenes_log2   <-  log2(NewGenes_Clean + 1)
NewGenesOrdered <- NewGenes_Clean[order(-NewGenes_Clean$Normal),]; View(NewGenesOrdered)
top_genes_NewGenes_Trop <- NewGenesOrdered %>% filter(Normal>0) %>% select(Normal)
View(top_genes_NewGenes_Trop)
k  <- dim(NewGenes_Clean); proporcion <- 1;
NS <- round(k[1]*proporcion);
random_genes_NewGenes  <- sample(rownames(NewGenes_Clean),NS );
sampledNewGenes_Log2   <- NewGenes_log2[random_genes_NewGenes, ];
NewGenes_log2_filtrado <- NewGenes_log2[rowSums(NewGenes_log2) != 0, ];
View(NewGenes_log2_filtrado)
LetraSize <- 6
pdf("MapasCalor/BoxplotEhMybSRNASeq.pdf")
boxplot(NewGenes_log2_filtrado, las = 2)
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSRNASeq.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - RNASeq")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSRNASeqMycolors.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - RNASeq")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSRNASeqMycolors2.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors2,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - RNASeq")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSRNASeqMycolors3.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors3,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - RNASeq")
dev.off()
pdf("MapasCalor/HeathmapCFNormRenglonEhMybSRNASeqMycolors4.pdf") # sin dendogramas columnas
pheatmap(NewGenes_log2_filtrado, cluster_cols = FALSE,color = my_colors4,
scale = "row",fontsize_row = LetraSize, border_color = NA,
main = "Genes EhMybS - RNASeq")
dev.off()
my_colors = brewer.pal(n = 11, name = "RdBu")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
my_colors2 = c("green", "yellow", "pink")
my_colors2 = colorRampPalette(my_colors2)(50)
my_colors3 = brewer.pal(n = 11, name = "RdBu")
my_colors3 = colorRampPalette(my_colors3)(50)
my_colors3 = rev(my_colors3)
my_colors4 = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100)
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
write_csv(EhMybSgenesexpression,"EhMybSGenesMicroarray.csv")
View(EhMybSgenesexpression)
EhMybSgenesexpression <- read_excel("EhMybSgenesexpressionMicroarray.xls")
write_csv(EhMybSgenesexpression,"EhMybSGenesMicroarray.csv")
View(EhMybSgenesexpression)
NewGenes <- read_csv("EhMybSGenesmicroarray.csv"); View(NewGenes)
