y <- datos_cancer$sobrevivio
####---- 2.12.1 Aplicación ----
beta1 <- newton_raphson_1(X, y)
beta2 <- newton_raphson_2(X, y)
beta_glm <- coef(glm(sobrevivio ~ ., data = datos_cancer, family = binomial))
####---- 2.12.2 Comparación ----
coef_names <- names(beta_glm)
####---- 2.12.3 Crear tabla comparativa ----
tabla_coef <- data.frame(
Variable = coef_names,
GLM = round(beta_glm, 4),
Newton_Raphson_1 = round(beta1, 4),
Newton_Raphson_2 = round(beta2, 4)
)
print(tabla_coef)
####---- 2.12.4 Convertir tabla a formato largo para ggplot2 ----
library(tidyr)
library(dplyr)
tabla_larga <- tabla_coef %>%
pivot_longer(cols = -Variable, names_to = "Metodo", values_to = "Coeficiente")
####---- 2.12.5 Graficar comparativa ----
library(ggplot2)
ggplot(tabla_larga, aes(x = Variable, y = Coeficiente, color = Metodo)) +
geom_point(position = position_dodge(width = 0.4), size = 3) +
labs(title = "Comparación de coeficientes estimados",
y = "Valor del coeficiente",
x = "Variable explicativa") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
comparativo_df <- data.frame(
Variable = rownames(comparativo),
GLM = round(beta_glm, 4),
Newton_Raphson = round(beta1, 4),
Grad_Conjugado = round(beta2, 4)
)
comparativo_df <- data.frame(
Variable = names(beta_glm),
GLM = round(beta_glm, 4),
Newton_Raphson = round(beta1, 4),
Grad_Conjugado = round(beta2, 4)
)
comparativo_df
datos_chd$Enfermedad <- factor(datos_chd$Enfermedad, levels = c(0,1), labels = c("Sano", "Enfermo"))
datos_chd$clasificacion <- factor(datos_chd$clasificacion, levels = c(0,1), labels = c("Sano", "Enfermo"))
matriz1 <- table(
`Valor real` = datos_chd$Enfermedad,
`Predicción del modelo` = datos_chd$clasificacion
)
print(matriz1)
####---- 10.6.4 Convertir tabla a formato largo para ggplot2 ----
library(tidyr)
library(dplyr)
tabla_larga <- tabla_coef %>%
pivot_longer(cols = -Variable, names_to = "Metodo", values_to = "Coeficiente")
####---- 10.6.5 Graficar comparativa ----
library(ggplot2)
ggplot(tabla_larga, aes(x = Variable, y = Coeficiente, color = Metodo)) +
geom_point(position = position_dodge(width = 0.4), size = 3) +
labs(title = "Comparación de coeficientes estimados",
y = "Valor del coeficiente",
x = "Variable explicativa") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
comparativo_df <- data.frame(
Variable = names(beta_glm),
GLM = round(beta_glm, 4),
Newton_Raphson = round(beta1, 4),
Grad_Conjugado = round(beta2, 4)
)
#---- FIN ----
```
TN
# Chunk 1
set.seed(123)
lapply(c("pROC", "ggplot2", "broom", "caret", "tidyr", "dplyr"), library, character.only = TRUE)
# Chunk 2
n <- 1000
edad <- round(rnorm(n, mean = 55, sd = 10))
colesterol <- round(rnorm(n, mean = 220, sd = 30))
presion <- round(rnorm(n, mean = 135, sd = 20))
tabaco <- rbinom(n, 1, 0.25)
diabetes <- rbinom(n, 1, 0.2)
obesidad <- rbinom(n, 1, 0.3)
# Chunk 3
log_odds_chd <- -8 +
0.035 * edad +        # impacto moderado por año
0.015 * colesterol +  # efecto más suave
0.02 * presion +      # efecto leve (presión ya alta)
1.0  * tabaco +       # riesgo fuerte si fuma
1.5  * diabetes +     # riesgo fuerte si es diabético
0.8  * obesidad       # riesgo moderado-alto si tiene obesidad
# Chunk 4
probabilidad_chd <- 1 / (1 + exp(-log_odds_chd))
# Chunk 5
enfermedad_corazon <- rbinom(n, 1, probabilidad_chd)
# Chunk 6
datos_chd <- data.frame(
Edad = edad,
Colesterol = colesterol,
Presion = presion,
Tabaquismo = tabaco,
Diabetes = diabetes,
Obesidad = obesidad,
Enfermedad = enfermedad_corazon)
head(datos_chd,10)
# Chunk 7
modelo_chd <- glm(Enfermedad ~ Edad + Colesterol +
Presion + Tabaquismo + Diabetes +
Obesidad,
data = datos_chd, family = binomial)
summary(modelo_chd)
miscoeficientes <- coef(modelo_chd)
head(miscoeficientes,10)
# Chunk 8
coef_reales <- c(
`(Intercept)` = -6,
Edad = 0.04,
Colesterol = 0.03,
Presion = 0.05,
Tabaquismo = 0.8,
Diabetes = 1.2,
Obesidad = 0.5
)
# Chunk 9
comparativo <- data.frame(
Coef_estimados = round(miscoeficientes,3),
Coef_reales = round(coef_reales[names(miscoeficientes)], 3)
)
comparativo$diferencia <- round(comparativo$Coef_estimados-comparativo$Coef_reales,3)
print(comparativo)
# Chunk 10
datos_chd$prediccion <- predict(modelo_chd,type = "response")
# Chunk 11
datos_chd$clasificacion <- ifelse(datos_chd$prediccion >= 0.5, 1, 0)
# Chunk 12
matriz1 <- table("Valor Real" = datos_chd$Enfermedad,
"Prediccion" = datos_chd$clasificacion)
print(matriz1)
TN <- matriz1["0","0"]
TP <- matriz1["1","1"]
FP <- matriz1["0","1"]
FN <- matriz1["1","0"]
TN
matriz1
TP
sum(matriz1)
FP
FN
typeof('mi constante')
1/3.0
options(digits=3)
1/3
1/17.0
options(digits=3)
1/17.0
options(digits=5)
1/17.0
options(digits=9)
1/17.0
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
x0 = 1
(x1 = x0 - pi*x0 + 1 ) # los paréntesis operan como print(x1)
#[1] -1.141593
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
x0 = 1
(x1 = x0 - pi*x0 + 1 ) # los paréntesis operan como print(x1)
#[1] -1.141593
# Objetos definidos
ls()
# [1] "e" "txt" "x" "x0"
...
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
x0 = 1
(x1 = x0 - pi*x0 + 1 ) # los paréntesis operan como print(x1)
#[1] -1.141593
# Objetos definidos
ls()
# [1] "e" "txt" "x" "x0"
# Eliminar todos los objetos
rm(list= ls())
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
x0 = 1
(x1 = x0 - pi*x0 + 1 ) # los paréntesis operan como print(x1)
#[1] -1.141593
# Objetos definidos
ls()
# [1] "e" "txt" "x" "x0"
# Eliminar todos los objetos
rm(list= ls())
x0 = 1
x1 = x0 - pi*x0 + 1
cat("x0 =", x0, "\n"
,
"x1 =", x1) ## "\n" = cambio de línea
# x0 = 1
# x1 = -1.141593
x2 = print(x1) # print imprime
# [1] -1.141593 # y se puede usar el valor que retorna
(x2+1)
# [1] -0.1415927
e = exp(1); x = 0.003 # asignación. Se puede usar ";" para separar instrucciones
x0 = e^(2*x)
txt = "El valor de x0 es " # asignación string
cat(txt, x0) # "cat" concatena y convierte a string
# El valor de x0 es 1.006018
x0 = 1
(x1 = x0 - pi*x0 + 1 ) # los paréntesis operan como print(x1)
#[1] -1.141593
# Objetos definidos
ls()
# [1] "e" "txt" "x" "x0"
# Eliminar todos los objetos
rm(list= ls())
x0 = 1
x1 = x0 - pi*x0 + 1
cat("x0 =", x0, "\n"
,
"x1 =", x1) ## "\n" = cambio de línea
# x0 = 1
# x1 = -1.141593
x2 = print(x1) # print imprime
# [1] -1.141593 # y se puede usar el valor que retorna
(x2+1)
# [1] -0.1415927
18%%5
18%/%5
18%%5
4%/%3
4%%3
4%%2
17%/%5
17%%5
17+5
17*5
17*5
17^5
17%/%5
17%%5
17<5
17>5
17<5
17>5
17<=5
17>=5
17!=5
17!5
log(12)
log(12,2)
exp(12)
exp(1)
log(1)
asin(2)
asin(96)
asin(0.96)
sin(45)
cos(45)
tan(45)
asin(0.96)
acos(0.97)
atan(0.45)
floor(1.56)
ceiling(1.56)
max(4,7,2,12)
min(4,7,2,12)
sig(-45)
sign(-45)
abs(-34)
sqrt(8)
floor(1.56)
ceiling(1.56)
max(4,7,2,12)
min(4,7,2,12)
sign(-45)
options(digits=3); 1/7
# c) options(digits=6); 1/7
options(digits=6); 1/7
round(75.324568,2)
round(67.45)
e = exp(1);
x = 0.0034
e <- exp(1)
x <- 0.034;
x0 = e^(2*x)
txt = "El valor de x0 es "
cat(txt, x0)
paste(txt,x0)
paste0(txt,x0
)
txt = "El valor de x0 es _"
cat(txt, x0)
paste(txt,x0)
paste0(txt,x0)
x0 <- 1
(x1 <- x0 - pi*x0 + 1 )
x1 <- x0 - pi*x0 + 1
print(x1)
ls()
rm(list= ls())
ls
ls()
cat("x0 =", x0, "\n","x1 =", x1)
x0 <- 1
x1 <- x0 - pi*x0 + 1
cat("x0 =", x0, "\n","x1 =", x1)
x2 = print(x1)
x2+1
(x2+1)
x2-1
(x2+1)
rm(list= ls())
ls()
x0 <- 1
x1 <- x0 - pi*x0 + 1
cat("x0 =", x0, "\n","x1 =", x1)
x2-1
x2 <- print(x1)
x2-1
(x2+1)
f2 <- fun2(2,3,1:1000)
fun2 <- function(x,h,k){
res <- 1/h*sin(kx)
return(res)
}
f2 <- fun2(2,3,1:1000)
fun2 <- function(x,h,k){
res <- 1/h*sin(kx)
return(res)
}
f2 <- fun2(1:1000,2,3)
fun2 <- function(x,h,k){
res <- 1/h*sin(k*x)
return(res)
}
f2 <- fun2(1:1000,2,3)
f2
plot(f2)
plot(f2,type="l")
f2 <- fun2(1:100,2,3)
plot(f2,type="l")
plot(f2,type="l", col= red)
plot(f2,type="l", col= "red")
plot(f2,type="l", col= "red", lwd=2)
plot(f2,type="l", col= "red", lwd=2,
main= "Grafico de la funcion f2",
xlab= "x",
ylab="f(x)=1/h*sin(k*x)")
plot(f2,type="l", col= "red", lwd=2,
main= "Grafico de la funcion f2",
xlab= "x",
ylab="f(x)=1/h*sin(k*x)",
axes= TRUE)
##---- OPERADORES LOGICOS ----
17<5
17>5
17<=5
17>=5
17!=5
17==5
##---- OPERADORES ARITMETICOS ----
# SUMA, RESTA, MULTIPLICACION, DIVISION, POTENCIA, MODULO, DIVISION ENTERA
17+5
17*5
17*5
17^5
17%/%5
17%%5
##---- LOGARITMOS Y EXPONENCIALES ----
log(1)
log(12)
log(12,2)
exp(12)
exp(1)
##---- FUNCIONES TRIGONOMETRICAS ----
sin(45)
cos(45)
tan(45)
asin(0.96)
acos(0.97)
atan(0.45)
##---- FUNCIONES VARIAS ----
abs(-34)
sqrt(8)
floor(1.56)
ceiling(1.56)
max(4,7,2,12)
min(4,7,2,12)
sign(-45)
##---- EJERCICIOS DE PRACTICA ----
# calcular la expresion cos(pi/6+pi/2)+e^2
# calcular la expresion cos(pi/6+pi/2)+e^2*log(5)+arc cos(1/raiz(2))
# introducir las siguientes expresiones:
# a) 1/7
# b) options(digits=3); 1/7
# c) options(digits=6); 1/7
# d) round(67.45)
# e) round(75.324568,2)
# f) options(digits=7);
# g) signif(56.345458234234,2)
# h) signif(56.345458234234)
# i) exp(-30)
# j) options(scipen= 999)
# k) exp(-30)
# l) options(scipen=0)
#---- Librerias ----
library(ggplot2)
library(dplyr)
library(ggrepel)
#---- Directorio de trabajo ----
#setwd("~/Documentos/VolcanoPlots")
setwd("~/Documents/GitHub/MapaCalorReloaded/VolcanoPlots")
#---- Lectura de datos ----
datos <- read.table("pEhExvsEhMyb10.txt",
header = TRUE,    # Si la primera fila tiene nombres de columna
sep = "\t",       # \t = tabulador; usa "," si es CSV
stringsAsFactors = FALSE)
summary(datos)
colnames(datos)<- c("Genes","baseMean","log2FC",
"lfcSE","stat","pvalue","padj",
"EhMyb10_1","EhMyb10_2","EhMyb10_3",
"pEhEx_1","pEhEx_2","pEhEx_3",
"EhMyb10_1.1","EhMyb10_2.1","EhMyb10_3.1",
"pEhEx_1.1","pEhEx_2.1","pEhEx_3.1",
"Certeza","DE" )
# Parametro central
top_n_labels <- 0
#---- Procesamiento de datos ----
alpha_cut    <- 0.05; lfc_cut      <- 1.8;
##---- dataframe ----
datos <- datos %>%
mutate(
fuente_pvalue = padj,
p_selecc = pvalue,
p_selecc = pmax(p_selecc, .Machine$double.xmin),        # evitar -Inf
menoslog10p = -log10(p_selecc),
signif = case_when(
p_selecc < alpha_cut & abs(log2FC) > lfc_cut ~ "Significativo", TRUE ~ "No Significativo"),
direccion = case_when(
p_selecc < alpha_cut & log2FC >=  lfc_cut ~ "Sobreexpresado",
p_selecc < alpha_cut & log2FC <= -lfc_cut ~ "Subexpresado",
TRUE ~ "No Significativo")
)
##---- Etiquetar los top por nivel de significancia ----
to_label <- datos %>%
filter(signif == "Significativo") %>% arrange(desc(menoslog10p)) %>% slice_head(n = top_n_labels)
print(to_label)
##---- Generacion de la grafica de Volcan ----
p <- ggplot(datos, aes(x = log2FC, y = menoslog10p)) +
geom_point(aes(color = direccion), alpha = 0.8, size = 2) +
scale_color_manual(values = c("Subexpresado" = "#1f77b4", "No Significativo" = "grey70", "Sobreexpresado" = "#d62728")) +
geom_vline(xintercept = c(-lfc_cut, lfc_cut), linetype = "dashed") +
geom_hline(yintercept = -log10(alpha_cut), linetype = "dashed") +
ggrepel::geom_text_repel(
data = to_label,aes(label = Genes),
size = 1.5, max.overlaps = 50, segment.size=0.15
) +
labs(
title = "Gráfico para ______________",
x = "log2(Fold Change)",y = "-log10(p)", color = "Dirección"
) +  theme_minimal(base_size = 12)
print(p)
nombre0 <- paste0("VolcanoPlot_pvalue0",top_n_labels,".pdf")
pdf(nombre0)
print(p)
dev.off()
#---- Contando ----
conteo_colores <- datos %>%
filter(!is.na(log2FC), !is.na(menoslog10p),
direccion %in% c("Sobreexpresado", "Subexpresado")) %>%
count(direccion, name = "n_genes")
conteo_colores <- as.data.frame(conteo_colores);
nombre1 <- paste0("cuantos_color_pvalue0",top_n_labels,".csv")
write.csv(conteo_colores,nombre1)
##----- Data frame para genes sobreexpresados -----
df_sobreexpresado <- datos %>%
filter(!is.na(log2FC), !is.na(menoslog10p),
direccion == "Sobreexpresado") %>%
select(Genes, log2FC, menoslog10p, pvalue)
nombre3 <- paste0("Genes_sobreexpresados_pvalue0",top_n_labels,".csv")
write.csv(df_sobreexpresado,nombre3)
##----- Data frame para genes subexpresados -----
df_subexpresado <- datos %>%
filter(!is.na(log2FC), !is.na(menoslog10p),
direccion == "Subexpresado") %>%
select(Genes, log2FC, menoslog10p, pvalue)
nombre4 <- paste0("Genes_subexpresados_pvalue0",top_n_labels,".csv")
write.csv(df_subexpresado,nombre4)
